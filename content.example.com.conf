# 原图服务器配置
# 优先返回已生成缩略图的图片，如果没有，则通过反向代理到本机，通过nginx对原图进行压缩后保存到缩略图目录，并返回给用户
# 如果请求的图片不需要压缩，则直接请求原图地址
upstream resize{
  server 127.0.0.1:8000;
}

server {

  listen  8000;
  server_name thumb.example.com;
  access_log off;
  #access_log /var/log/nginx/content_example_com.log;
  index  index.html;
  # 缩略图根目录
  set $thumbs /content/thumbs;
  # 原图根目录
  set $images /content/images;

  # 如果为缩略图请求，将相关信息进行保存，
  if ($uri ~* ^/thumbs/([a-z]+)/([0-9])/([0-9]+)/([0-9]+)/([0-9a-z]+)_([0-9]+)x([0-9]+).(jpg|jpeg|png)$) {
    # 图片宽度
    set $width $6;
    # 图片调度
    set $height $7;
    # 图片相对路径
    set $file /$1/$2/$3/$4/$5.$8;
    # 图片尺寸目录
    set $size /$6x$7;
  }

  # 请求缩略图目录，如果没有则请求原图进行缩放处理
  location /thumbs/ {
    alias $thumbs;
    try_files $size$file = @resize;
  }

  # 反向代理，将缩放后的缩略图保存到指定目录
  location @resize {
    resolver 127.0.0.1:8000;
    proxy_set_header Host $host;
    proxy_store $thumbs$size$file;
    proxy_temp_path /tmp;
    proxy_pass http://resize/$size$file;
  }

  # 原图缩放
  location ~* ^/([0-9]+)x([0-9]+)(.*) {
    set $width $1;
    set $height $2;
    set $path $3;
    root $images;
    # 查找文件，如果没有返回404
    try_files $path = @html_404;
    # 根据指定宽度对原图进行缩放
    image_filter_buffer 50M;
    image_filter_jpeg_quality 90;
    image_filter resize $width -;
  }

  # 访问原图
  location /images/ {
    alias $images/;
    error_page 404 = @html_404;
  }

  # 其它访问返回404
  location / {
    try_files $uri 50x.html = @html_404;
  }

  # 404错误页
  location @html_404 {
    try_files /404.jpg = 404;
  }
}
